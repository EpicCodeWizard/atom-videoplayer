// Generated by Haxe 4.0.0 (git build development @ 42fc222)
(function ($hx_exports) { "use strict";
var HxOverrides = function() { };
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var VideoPlayer = $hx_exports["VideoPlayer"] = function(state) {
	this.isPlaying = false;
	var _gthis = this;
	this.file = new atom_File(state.path);
	this.seekSpeed = 1;
	this.wheelSpeed = 1;
	this.element = window.document.createElement("div");
	this.element.classList.add("videoplayer");
	this.element.setAttribute("tabindex","-1");
	if(!atom.config.get("videoplayer.background.transparent")) {
		this.element.style.background = atom.config.get("videoplayer.background.color").toHexString();
	}
	this.video = window.document.createElement("video");
	this.video.controls = true;
	this.video.src = this.file.getPath();
	this.element.appendChild(this.video);
	this.element.addEventListener("DOMNodeInserted",$bind(this,this.handleInsertDOM),false);
	this.video.addEventListener("canplaythrough",$bind(this,this.handleVideoCanPlay),false);
	this.video.addEventListener("playing",$bind(this,this.handleVideoPlay),false);
	this.video.addEventListener("ended",$bind(this,this.handleVideoEnd),false);
	this.video.addEventListener("error",$bind(this,this.handleVideoError),false);
	this.commands = new atom_CompositeDisposable();
	this.addCommand("goto-start",function(e) {
		_gthis.video.currentTime = 0;
	});
	this.addCommand("goto-end",function(e1) {
		_gthis.video.currentTime = _gthis.video.duration;
	});
	this.addCommand("rate-increase",function(e2) {
		_gthis.video.playbackRate += 0.1;
	});
	this.addCommand("rate-decrease",function(e3) {
		_gthis.video.playbackRate -= 0.1;
	});
	this.addCommand("toggle-controls",function(e4) {
		_gthis.video.controls = !_gthis.video.controls;
	});
	this.addCommand("seek-backward",function(e5) {
		_gthis.seek(-_gthis.calcSeekValue(e5.originalEvent != null && e5.originalEvent.shiftKey));
	});
	this.addCommand("seek-forward",function(e6) {
		var tmp = _gthis.calcSeekValue(e6.originalEvent != null && e6.originalEvent.shiftKey);
		_gthis.seek(tmp);
	});
	this.addCommand("toggle-mute",$bind(this,this.toggleMute));
	this.addCommand("toggle-playback",$bind(this,this.togglePlayback));
	if(state != null) {
		if(state.time != null) {
			this.video.currentTime = state.time;
		}
		if(state.volume != null) {
			this.video.volume = state.volume;
		}
		if(state.play) {
			this.play();
		}
		if(state.mute) {
			this.video.muted = true;
		}
	}
};
VideoPlayer.activate = function(state) {
	VideoPlayer.disposables = new atom_CompositeDisposable();
	VideoPlayer.disposables.add(atom.workspace.addOpener(VideoPlayer.openURI));
	VideoPlayer.disposables.add(atom.workspace.onDidChangeActivePaneItem(function(item) {
		if(VideoPlayer.statusbar != null) {
			if((item instanceof VideoPlayer)) {
				var player = item;
				VideoPlayer.statusbar.textContent = player.video.videoWidth + "x" + player.video.videoHeight;
				VideoPlayer.statusbar.style.display = "inline-block";
			} else {
				VideoPlayer.statusbar.style.display = "none";
				VideoPlayer.statusbar.textContent = "";
			}
		}
	}));
};
VideoPlayer.deactivate = function() {
	VideoPlayer.disposables.dispose();
	if(VideoPlayer.statusbar != null) {
		VideoPlayer.statusbar.remove();
	}
};
VideoPlayer.openURI = function(uri) {
	var ext = haxe_io_Path.extension(uri).toLowerCase();
	if(Lambda.has(VideoPlayer.allowedFileTypes,ext)) {
		var player = new VideoPlayer({ path : uri, time : null, volume : atom.config.get("videoplayer.playback.volume"), play : atom.config.get("videoplayer.playback.autoplay"), mute : false});
		VideoPlayer.disposables.add(player);
		return player;
	}
	return null;
};
VideoPlayer.consumeStatusBar = function(pane) {
	var this1 = window.document.createElement("div");
	this1.classList.add("status-bar-videoplayer","inline-block","icon","file-media");
	this1.style.display = "none";
	pane.addLeftTile({ item : VideoPlayer.statusbar = this1});
};
VideoPlayer.deserialize = function(state) {
	return new VideoPlayer(state);
};
VideoPlayer.prototype = {
	serialize: function() {
		return { deserializer : "VideoPlayer", mute : this.video.muted, path : this.file.getPath(), play : !this.video.paused, time : this.video.currentTime, volume : this.video.volume};
	}
	,dispose: function() {
		this.commands.dispose();
		this.element.removeEventListener("DOMNodeInserted",$bind(this,this.handleInsertDOM));
		this.video.removeEventListener("canplaythrough",$bind(this,this.handleVideoCanPlay));
		this.video.removeEventListener("playing",$bind(this,this.handleVideoPlay));
		this.video.removeEventListener("ended",$bind(this,this.handleVideoEnd));
		this.video.removeEventListener("error",$bind(this,this.handleVideoError));
		this.video.removeEventListener("click",$bind(this,this.handleVideoClick));
		this.video.removeEventListener("mousewheel",$bind(this,this.handleMouseWheel));
		this.video.pause();
		this.video.remove();
		this.video = null;
	}
	,getPath: function() {
		return this.file.getPath();
	}
	,getTitle: function() {
		return this.file.getBaseName();
	}
	,getIconName: function() {
		return "file-media";
	}
	,getURI: function() {
		return this.getPath();
	}
	,getEncodedURI: function() {
		var s = this.getPath();
		return "file://" + encodeURIComponent(s);
	}
	,isEqual: function(other) {
		return (other instanceof VideoPlayer);
	}
	,togglePlayback: function() {
		if(this.isPlaying) {
			this.pause();
		} else {
			this.play();
		}
	}
	,toggleMute: function() {
		this.video.muted = !this.video.muted;
	}
	,play: function() {
		if(!this.isPlaying) {
			this.isPlaying = true;
			this.video.play();
		}
	}
	,pause: function() {
		if(this.isPlaying) {
			this.isPlaying = false;
			this.video.pause();
		}
	}
	,seek: function(secs) {
		if(secs != null && secs >= 0 && this.video.currentTime != null) {
			this.video.currentTime += secs;
		}
		return this.video.currentTime;
	}
	,calcSeekValue: function(fast,factor,min,max) {
		if(max == null) {
			max = 30;
		}
		if(min == null) {
			min = 1;
		}
		if(factor == null) {
			factor = 100;
		}
		if(fast == null) {
			fast = false;
		}
		var v = this.video.duration / factor;
		v = Math.min(max,Math.max(min,v));
		if(fast) {
			v *= 3;
		}
		return v;
	}
	,addCommand: function(name,fn) {
		this.commands.add(atom.commands.add(".videoplayer","videoplayer:" + name,fn));
	}
	,handleInsertDOM: function(e) {
		if(this.isPlaying) {
			this.video.play();
		}
	}
	,handleVideoCanPlay: function(e) {
		this.video.removeEventListener("canplaythrough",$bind(this,this.handleVideoCanPlay));
		this.video.addEventListener("click",$bind(this,this.handleVideoClick),false);
		this.video.addEventListener("mousewheel",$bind(this,this.handleMouseWheel),false);
		VideoPlayer.statusbar.textContent = this.video.videoWidth + "x" + this.video.videoHeight;
	}
	,handleVideoPlay: function(e) {
		this.isPlaying = true;
	}
	,handleVideoEnd: function(e) {
		this.isPlaying = false;
		if(atom.isFullScreen()) {
			atom.toggleFullScreen();
		}
	}
	,handleVideoError: function(e) {
		console.error(e);
		atom.notifications.addError("Cannot play video: " + this.getPath());
		this.isPlaying = false;
		if(atom.isFullScreen()) {
			atom.toggleFullScreen();
		}
	}
	,handleVideoClick: function(e) {
		if(this.isPlaying) {
			this.pause();
		} else {
			this.play();
		}
	}
	,handleMouseWheel: function(e) {
		var v = e.wheelDelta / 100 * this.wheelSpeed;
		if(e.ctrlKey) {
			v *= 10;
			if(e.shiftKey) {
				v *= 10;
			}
		}
		this.seek(v);
	}
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_File = require("atom").File;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
module.exports = VideoPlayer;
VideoPlayer.allowedFileTypes = ["3gp","avi","mov","mp4","m4v","mkv","ogv","ogm","webm"];
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
