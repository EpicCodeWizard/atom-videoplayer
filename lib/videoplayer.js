// Generated by Haxe 4.1.4
(function ($hx_exports, $global) { "use strict";
var HxOverrides = function() { };
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var VideoPlayer = function(state) {
	var _gthis = this;
	this.file = new atom_File(state.path);
	this.element = window.document.createElement("div");
	this.element.classList.add("videoplayer");
	this.element.setAttribute("tabindex","-1");
	if(!atom.config.get("videoplayer.background.transparent")) {
		this.element.style.background = atom.config.get("videoplayer.background.color").toHexString();
	}
	this.video = window.document.createElement("video");
	this.video.controls = true;
	this.video.loop = atom.config.get("videoplayer.playback.loop");
	this.video.src = this.file.getPath();
	this.element.appendChild(this.video);
	this.setScaleMode(atom.config.get("videoplayer.scale"));
	this.video.addEventListener("playing",$bind(this,this.handleVideoPlay),false);
	this.video.addEventListener("ended",$bind(this,this.handleVideoEnd),false);
	this.video.addEventListener("error",$bind(this,this.handleVideoError),false);
	this.video.addEventListener("click",$bind(this,this.handleVideoClick),false);
	this.video.addEventListener("mousewheel",$bind(this,this.handleMouseWheel),false);
	this.commands = new atom_CompositeDisposable();
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "play",function(e) {
		if(_gthis.video.paused) {
			_gthis.video.play();
		} else {
			_gthis.video.pause();
		}
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "mute",function(e) {
		_gthis.video.muted = !_gthis.video.muted;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "seek-forward",function(e) {
		var ev = e.originalEvent;
		var v;
		switch(ev.keyCode) {
		case 33:
			v = 600;
			break;
		case 39:
			v = ev.shiftKey ? 60 : 10;
			break;
		default:
			v = 10;
		}
		_gthis.video.currentTime += v;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "seek-backward",function(e) {
		var ev = e.originalEvent;
		var v;
		switch(ev.keyCode) {
		case 34:
			v = 600;
			break;
		case 37:
			v = ev.shiftKey ? 60 : 10;
			break;
		default:
			v = 10;
		}
		_gthis.video.currentTime += -v;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "volume-increase",function(e) {
		return _gthis.video.volume = Math.min(_gthis.video.volume + 0.1,1.0);
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "volume-decrease",function(e) {
		return _gthis.video.volume = Math.max(_gthis.video.volume - 0.1,0.0);
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "playbackrate-increase",function(e) {
		var rate = _gthis.video.playbackRate;
		rate += 0.1;
		if(rate >= 10) {
			rate = 10;
		}
		return _gthis.video.playbackRate = rate;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "playbackrate-decrease",function(e) {
		var rate = _gthis.video.playbackRate;
		rate -= 0.1;
		if(rate <= 0.1) {
			rate = 0.1;
		}
		_gthis.video.playbackRate = rate;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "playbackrate-reset",function(e) {
		return _gthis.video.playbackRate = 1.0;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "toggle-fullscreen",function(e) {
		_gthis.toggleFullscreen();
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "goto-start",function(e) {
		return _gthis.video.currentTime = 0;
	}));
	this.commands.add(atom.commands.add(this.element,"videoplayer:" + "screenshot",function(e) {
		var canvas = window.document.createElement("canvas");
		canvas.width = _gthis.video.videoWidth;
		canvas.height = _gthis.video.videoHeight;
		var ctx = canvas.getContext("2d");
		ctx.drawImage(_gthis.video,0,0,canvas.width,canvas.height);
		var dataURI = canvas.toDataURL("image/png");
		dataURI = HxOverrides.substr(dataURI,22,null);
		var path = haxe_io_Path.withoutExtension(_gthis.file.getPath()) + "_" + _gthis.video.currentTime + ".png";
		js_node_Fs.writeFile(path,dataURI,{ encoding : "base64"},function(e) {
			if(e != null) {
				atom.notifications.addError("Failed to save screenshot");
			}
		});
	}));
	atom.config.onDidChange("videoplayer.playback.autoplay",{ },function(e) {
		return _gthis.video.autoplay = e.newValue;
	});
	atom.config.onDidChange("videoplayer.playback.loop",{ },function(e) {
		return _gthis.video.loop = e.newValue;
	});
	atom.config.onDidChange("videoplayer.scale",{ },function(e) {
		_gthis.setScaleMode(e.newValue);
	});
	atom.config.onDidChange("videoplayer.background",{ },function(e) {
		var tmp = e.newValue.transparent ? null : e.newValue.color.toHexString();
		_gthis.element.style.background = tmp;
	});
	if(state != null) {
		if(state.mute) {
			this.video.muted = true;
		}
		if(state.time != null) {
			this.video.currentTime = state.time;
		}
		if(state.volume != null) {
			this.video.volume = state.volume;
		}
		if(state.play) {
			this.video.oncanplaythrough = function(e) {
				return _gthis.video.play();
			};
		}
	}
};
VideoPlayer.activate = $hx_exports["activate"] = function(state) {
	VideoPlayer.disposables = new atom_CompositeDisposable();
	VideoPlayer.disposables.add(atom.workspace.addOpener(VideoPlayer.openURI));
	VideoPlayer.disposables.add(atom.workspace.onDidChangeActivePaneItem(function(item) {
		if(((item) instanceof VideoPlayer)) {
			var player = item;
			var video = player.video;
			VideoPlayer.statusbar.textContent = video.videoWidth + "x" + video.videoHeight;
		} else {
			VideoPlayer.statusbar.textContent = "";
		}
	}));
};
VideoPlayer.deactivate = $hx_exports["deactivate"] = function() {
	VideoPlayer.disposables.dispose();
	if(VideoPlayer.statusbar != null) {
		VideoPlayer.statusbar.remove();
	}
};
VideoPlayer.deserialize = $hx_exports["deserialize"] = function(state) {
	return new VideoPlayer(state);
};
VideoPlayer.openURI = function(uri) {
	if(Lambda.has(VideoPlayer.allowedFileTypes,haxe_io_Path.extension(uri).toLowerCase())) {
		var player = new VideoPlayer({ path : uri, time : null, volume : atom.config.get("videoplayer.playback.volume"), play : atom.config.get("videoplayer.playback.autoplay"), mute : false});
		VideoPlayer.disposables.add(player);
		return player;
	}
	return null;
};
VideoPlayer.consumeStatusBar = $hx_exports["consumeStatusBar"] = function(pane) {
	if(VideoPlayer.statusbar == null) {
		VideoPlayer.statusbar = window.document.createElement("div");
		VideoPlayer.statusbar.classList.add("status-bar-videoplayer","inline-block");
		pane.addLeftTile({ item : VideoPlayer.statusbar});
	}
};
VideoPlayer.prototype = {
	serialize: function() {
		return { deserializer : "VideoPlayer", path : this.file.getPath(), time : this.video.currentTime, play : !this.video.paused, mute : this.video.muted, volume : this.video.volume};
	}
	,dispose: function() {
		this.commands.dispose();
		this.video.removeEventListener("playing",$bind(this,this.handleVideoPlay));
		this.video.removeEventListener("ended",$bind(this,this.handleVideoEnd));
		this.video.removeEventListener("error",$bind(this,this.handleVideoError));
		this.video.removeEventListener("click",$bind(this,this.handleVideoClick));
		this.video.removeEventListener("mousewheel",$bind(this,this.handleMouseWheel));
		this.video.remove();
		this.video = null;
	}
	,getEncodedURI: function() {
		var s = this.getPath();
		return "file://" + encodeURIComponent(s);
	}
	,getIconName: function() {
		return "file-media";
	}
	,getPath: function() {
		return this.file.getPath();
	}
	,getTitle: function() {
		return this.file.getBaseName();
	}
	,getURI: function() {
		return this.getPath();
	}
	,isEqual: function(other) {
		return ((other) instanceof VideoPlayer);
	}
	,addCommand: function(name,fn) {
		this.commands.add(atom.commands.add(this.element,"videoplayer:" + name,fn));
	}
	,seek: function(secs) {
		this.video.currentTime += secs;
	}
	,togglePlayback: function() {
		if(this.video.paused) {
			this.video.play();
		} else {
			this.video.pause();
		}
	}
	,toggleMute: function() {
		this.video.muted = !this.video.muted;
	}
	,toggleFullscreen: function() {
		if(atom.isFullScreen()) {
			window.document.exitFullscreen();
		} else {
			this.video.requestFullscreen();
		}
	}
	,setScaleMode: function(mode) {
		if(mode == "original") {
			mode = "none";
		}
		this.video.style.objectFit = mode;
	}
	,handleVideoPlay: function(e) {
	}
	,handleVideoEnd: function(e) {
	}
	,handleVideoError: function(e) {
		console.error(e);
	}
	,handleVideoClick: function(e) {
		if(this.video.paused) {
			this.video.play();
		} else {
			this.video.pause();
		}
	}
	,handleMouseWheel: function(e) {
		var v = e.wheelDelta < 0 ? -1 : 1;
		if(e.shiftKey) {
			v *= 10;
		}
		this.video.currentTime += v;
	}
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var atom_File = require("atom").File;
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_node_Fs = require("fs");
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
VideoPlayer.allowedFileTypes = ["3gp","avi","mov","mp4","m4v","mkv","ogv","ogm","webm"];
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
